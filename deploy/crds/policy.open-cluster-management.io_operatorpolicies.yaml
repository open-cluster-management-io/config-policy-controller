---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    policy.open-cluster-management.io/policy-type: template
  name: operatorpolicies.policy.open-cluster-management.io
spec:
  group: policy.open-cluster-management.io
  names:
    kind: OperatorPolicy
    listKind: OperatorPolicyList
    plural: operatorpolicies
    singular: operatorpolicy
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: OperatorPolicy is the Schema for the operatorpolicies API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: OperatorPolicySpec defines the desired state of OperatorPolicy
            properties:
              complianceType:
                description: ComplianceType describes whether we must or must not
                  have a given resource
                enum:
                - musthave
                - mustnothave
                type: string
              operatorGroup:
                description: |-
                  Include the name, namespace, and any `spec` fields for the OperatorGroup.
                  For more info, see `kubectl explain operatorgroup.spec` or
                  https://olm.operatorframework.io/docs/concepts/crds/operatorgroup/
                type: object
                x-kubernetes-preserve-unknown-fields: true
              remediationAction:
                description: 'RemediationAction : enforce or inform'
                enum:
                - Inform
                - inform
                - Enforce
                - enforce
                type: string
              removalBehavior:
                default: {}
                description: |-
                  RemovalBehavior defines what resources will be removed by enforced mustnothave policies.
                  When in inform mode, any resources that would be deleted if the policy was enforced will
                  be causes for NonCompliance, but resources that would be kept will be considered Compliant.
                properties:
                  clusterServiceVersions:
                    default: Delete
                    description: Specifies whether to delete the ClusterServiceVersion;
                      defaults to 'Delete'
                    enum:
                    - Keep
                    - Delete
                    type: string
                  customResourceDefinitions:
                    default: Keep
                    description: |-
                      Specifies whether to delete any CustomResourceDefinitions associated with the operator;
                      defaults to 'Keep' because deleting them should be done deliberately
                    enum:
                    - Keep
                    - Delete
                    type: string
                  operatorGroups:
                    default: DeleteIfUnused
                    description: |-
                      Specifies whether to delete the OperatorGroup; defaults to 'DeleteIfUnused' which
                      will only delete the OperatorGroup if there is not another resource using it.
                    enum:
                    - Keep
                    - DeleteIfUnused
                    type: string
                  subscriptions:
                    default: Delete
                    description: Specifies whether to delete the Subscription; defaults
                      to 'Delete'
                    enum:
                    - Keep
                    - Delete
                    type: string
                type: object
              severity:
                description: 'Severity : low, medium, high, or critical'
                enum:
                - low
                - Low
                - medium
                - Medium
                - high
                - High
                - critical
                - Critical
                type: string
              subscription:
                description: |-
                  Include the namespace, and any `spec` fields for the Subscription.
                  For more info, see `kubectl explain subscription.spec` or
                  https://olm.operatorframework.io/docs/concepts/crds/subscription/
                type: object
                x-kubernetes-preserve-unknown-fields: true
              upgradeApproval:
                description: |-
                  UpgradeApproval determines whether 'upgrade' InstallPlans for the operator will be approved
                  by the controller when the policy is enforced and in 'musthave' mode. The initial InstallPlan
                  approval is not affected by this setting. This setting has no effect when the policy is in
                  'mustnothave' mode. Allowed values are "None" or "Automatic".
                enum:
                - None
                - Automatic
                type: string
              versions:
                description: |-
                  Versions is a list of nonempty strings that specifies which installed versions are compliant when
                  in 'inform' mode, and which installPlans are approved when in 'enforce' mode
                items:
                  minLength: 1
                  type: string
                type: array
            required:
            - complianceType
            - subscription
            - upgradeApproval
            type: object
          status:
            description: OperatorPolicyStatus defines the observed state of OperatorPolicy
            properties:
              compliant:
                description: Most recent compliance state of the policy
                type: string
              conditions:
                description: Historic details on the condition of the policy
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              overlappingPolicies:
                description: |-
                  The list of overlapping OperatorPolicies (as name.namespace) which all manage the same
                  subscription, including this policy. When no overlapping is detected, this list will be empty.
                items:
                  type: string
                type: array
              relatedObjects:
                description: List of resources processed by the policy
                items:
                  description: RelatedObject is the list of objects matched by this
                    Policy resource.
                  properties:
                    compliant:
                      type: string
                    object:
                      description: ObjectResource is an object identified by the policy
                        as a resource that needs to be validated.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        kind:
                          description: |-
                            Kind of the referent. More info:
                            https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                          type: string
                        metadata:
                          description: Metadata values from the referent.
                          properties:
                            name:
                              description: |-
                                Name of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              type: string
                            namespace:
                              description: |-
                                Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              type: string
                          type: object
                      type: object
                    properties:
                      properties:
                        createdByPolicy:
                          description: Whether the object was created by the parent
                            policy
                          type: boolean
                        uid:
                          description: Store object UID to help track object ownership
                            for deletion
                          type: string
                      type: object
                    reason:
                      type: string
                  type: object
                type: array
              resolvedSubscriptionLabel:
                description: The resolved name.namespace of the subscription
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
